[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "BDM Workshop",
    "section": "",
    "text": "Übungsunterlagen\nDiese Unterlagen dienen dazu, den Entwicklungsprozess zu veranschaulichen. Sie sind vor allem als Gedankenstütze für mich (Nils) gedacht, um im Unterricht live zu coden."
  },
  {
    "objectID": "uebung_1.html#html",
    "href": "uebung_1.html#html",
    "title": "1  Übung 1",
    "section": "1.1 HTML",
    "text": "1.1 HTML\nStarten mit einer leeren html Datei. Diese Datei sowohl in RStudio wie auch in einem Browser öffnen.\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n\n&lt;/html&gt;\nhead und body hinzfügen:\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n+    &lt;head&gt;\n+\n+    &lt;/head&gt;\n+\n+    &lt;body&gt;+\n+\n+    &lt;/body&gt;\n\n&lt;/html&gt;\ntitle hinzfügen:\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n+        &lt;title&gt;Meine Seite&lt;/title&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n\n    &lt;/body&gt;\n\n&lt;/html&gt;\nEinen h1 Titel hinzfügen:\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Meine Seite&lt;/title&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n+        &lt;h1&gt;Meine Seite&lt;/h1&gt;\n+        &lt;p&gt;Das ist meine Seite&lt;/p&gt;\n    &lt;/body&gt;\n\n&lt;/html&gt;"
  },
  {
    "objectID": "uebung_1.html#css",
    "href": "uebung_1.html#css",
    "title": "1  Übung 1",
    "section": "1.2 CSS",
    "text": "1.2 CSS\nNeue Datei erstellen und speichern als style.css.\nHTML elemente selektieren und stylen:\nbody{\n    background-color: lightblue;\n    font-family: sans-serif;\n}\nNun müssen wir das css file noch in unsere html Datei einbinden:\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Meine Seite&lt;/title&gt;\n+       &lt;link rel=\"stylesheet\" href=\"style.css\"&gt;\n\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;h1&gt;Meine Seite&lt;/h1&gt;\n        &lt;p&gt;Das ist meine Seite&lt;/p&gt;\n    &lt;/body&gt;\n\n&lt;/html&gt;\nCSS funktioniert mit Selektoren. body selektiert im Prinzip die ganze Website. h1 selektiert alle h1 Elemente. p selektiert alle p Elemente.\n\n```css\nh1{\n    text-transform: uppercase;\n}\nWichtige weitere Selektoren: Selektion via class und id."
  },
  {
    "objectID": "uebung_1.html#javascript",
    "href": "uebung_1.html#javascript",
    "title": "1  Übung 1",
    "section": "1.3 JavaScript",
    "text": "1.3 JavaScript\n\n1.3.1 Basics\nJavaScript ist eine Programmiersprache, die im Browser ausgeführt wird. Sie ermöglicht es, die Website dynamisch zu verändern.\nDer Syntax ist oftmals ähnlich wie R.\nJeder Browser hat eine integrierte JS Konsole. Auf der offenen Website: F12 drücken und dann auf Console klicken.\n// wie R, aber nicht ganz korrekt\nmyname = \"Nils Ratnaweera\"\n\n// mit `let` deklarieren\nlet myname = \"Nils Ratnaweera\"\n\n// let ersetzt var\n// const ist wie let, aber die Variable kann nicht verändert werden\n\n// Semikolon am Ende jeder Zeile\nlet myname = \"Nils Ratnaweera\";\n\ntypeof(myname);\nArbeiten mit Zahlen:\nlet myage = 2023-1987;\n\ntypeof(myage);\n\nlet myage_days = myage * 365;\n\ntypeof(myage_days);\nJavaScript ist das letzte Element in userem HTML Dokument, und macht unsere statische Website dynamisch. Erstellt eine neue Datei script.js und fügt folgendes ein:\nlet myname = \"Nils Ratnaweera\";\nlet myage = 2023-1987;\nBindet das JS file in die HTML Datei ein:\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Meine Seite&lt;/title&gt;\n        &lt;link rel=\"stylesheet\" href=\"style.css\"&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;h1&gt;Meine Seite&lt;/h1&gt;\n        &lt;p&gt;Das ist meine Seite&lt;/p&gt;\n+       &lt;script src=\"script.js\"&gt;&lt;/script&gt;\n    &lt;/body&gt;\n\n&lt;/html&gt;\nNun können wir in der Konsole F12 auf die Variablen zugreifen:\nmyname\nmyage\nMit console.log() können wir etwas in die Konsole schreiben. In script.js:\nconsole.log(myname);\nconsole.log(myage);\n\n\n1.3.2 Optional: JavaScript Funktionen\nWir haben eben unser alter in Tagen berechnet. Das können wir in eine Funktion packen:\nfunction age_in_days(year_of_birth, year_today){\n    let myage = year_today-year_of_birth;\n    let myage_days = myage * 365;\n    return myage_days;\n}"
  },
  {
    "objectID": "uebung_1.html#mini-webapp",
    "href": "uebung_1.html#mini-webapp",
    "title": "1  Übung 1",
    "section": "1.4 Mini Webapp",
    "text": "1.4 Mini Webapp\ntitel, h1 und p in der HTML Datei ändern:\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n-       &lt;title&gt;Meine Seite&lt;/title&gt;\n+       &lt;title&gt;Tagesfortschritt App&lt;/title&gt;\n\n        &lt;link rel=\"stylesheet\" href=\"style.css\"&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n-      &lt;h1&gt;Meine Seite&lt;/h1&gt;\n+      &lt;h1&gt;Tagesfortschritt&lt;/h1&gt;\n-      &lt;p&gt;Das ist meine Seite&lt;/p&gt;\n+      &lt;p&gt;Wie weit ist der Tag bereits fortgeschritten?&lt;/p&gt;\n       &lt;script src=\"script.js\"&gt;&lt;/scrip&gt;\n    &lt;/body&gt;\n\n&lt;/html&gt;\nProgress bar hinzufügen (note to self: mit value rumspielen. label später hinzufügen):\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Meine Seite&lt;/title&gt;\n        &lt;title&gt;Tagesfortschritt App&lt;/title&gt;\n\n        &lt;link rel=\"stylesheet\" href=\"style.css\"&gt;\n       &lt;script src=\"script.js\"&gt;&lt;/script&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;h1&gt;Tagesfortschritt&lt;/h1&gt;\n        &lt;p&gt;Wie weit ist der Tag bereits fortgeschritten?&lt;/p&gt;\n\n+       &lt;label for=\"progress\" id=\"percent\"&gt;&lt;/label&gt;\n+       &lt;progress id = \"progress\" value = 0 max = 100&gt;&lt;/progress&gt;\n    &lt;/body&gt;\n\n&lt;/html&gt;\nIn der Console die Logik für die Berechtung des Tagesfortschritts in Prozent:\nlet now = new Date();\nlet hours_dec = now.getHours() + now.getMinutes()/60 + now.getSeconds()/3600;\nlet percent = hours_dec/24*100\nNun haben wir den Prozentwert. Diesen code in die script.js Datei kopieren.\nNun verändern wir den Progress bar, in dem wir den value ändern (folgender Teil in der Konsole entwickeln)\n// verändert den Progress bar\ndocument.getElementById(\"progress\").value = percent\n\n// verändert das label\ndocument.getElementById(\"percent\").innerHTML = percent\n\n\n// Label evt. auf 2 Nachkommastellen runden\nconst percent_text = percent.toFixed(2)+\"%\"\n\n// verändert das label\ndocument.getElementById(\"percent\").innerHTML = percent_text\nCode in das Script file kopieren.\n\n1.4.1 Publishen\n\nFiles in einen Ordner packen. Auf Github.zhaw.ch gehen und ein neues Repository erstellen. Files hochladen und pages aktivieren.\noder netlify.com / drop\n\n\n\n1.4.2 Optional: setInterval()\nAktuell müssen wir die Seite immer neu laden, um den Fortschritt zu sehen. Wir können das auch automatisieren. Dazu brauchen wir die Funktion setInterval(). Diese Funktion führt eine andere Funktion in einem bestimmten Intervall aus.\nconst now = new Date();\nconst hours_dec = now.getHours() + now.getMinutes()/60 + now.getSeconds()/3600;\nvar percent = hours_dec/24*100\ndocument.getElementById(\"progress\").value = percent\nconst percent_text = percent.toFixed(2)+\"%\"\ndocument.getElementById(\"percent\").innerHTML = percent_text\n+function update_progress(){\n    const now = new Date();\n    const hours_dec = now.getHours() + now.getMinutes()/60 + now.getSeconds()/3600;\n    var percent = hours_dec/24*100\n    document.getElementById(\"progress\").value = percent\n-   const percent_text = percent.toFixed(2)+\"%\"\n    // da man sonst kein fortschritt sieht\n+   const percent_text = percent.toFixed(4)+\"%\" \n    document.getElementById(\"percent\").innerHTML = percent_text\n+}\n\n+setInterval(update_progress, 100)"
  },
  {
    "objectID": "uebung_2.html",
    "href": "uebung_2.html",
    "title": "2  Übung 2",
    "section": "",
    "text": "In R shiny generieren wir HTML aus R. CSS wird weiterhin in CSS geschrieben, JavaScript ersetzen wir durch R.\nFür eine shiny app braucht es im Minimum 3 dinge:\n\nEin User Interface in HTML\nEine “Server Logik” (vorher JS, jetzt eine R Funktion mit 3 Argumenten)\ndie Funktion shinyApp(), welche das Userinterface und die Server Logik zusammenfügt.\n\nStarten wir, in dem wir ein R file mit diesen Elementen erstellen:\nlibrary(shiny)\n\nui &lt;- c()\n\nserver &lt;- function(input, output, session){}\n\nshinyApp(ui, server)\nWir können das Script zeile für Zeile ausführen und die verschiedenen Objekte anschauen.\nOhne Userinterface sieht das ganze noch sehr leer aus.\nlibrary(shiny)\n\n-ui &lt;- c()\n+ui &lt;- h1(\"Tagesfortschritt\")\n\nserver &lt;- function(input, output, session){}\n\nshinyApp(ui, server)\nlibrary(shiny)\n\n-ui &lt;- h1(\"Tagesfortschritt\")\n+ui &lt;- tagList(\n+   h1(\"Tagesfortschritt\"),\n+   p(\"Wie Weit ist der Tag fortgeschritten?\")\n+)\n\n\nserver &lt;- function(input, output, session){}\n\nshinyApp(ui, server)\nNun möchten wir, wie vorher, den Tagesfortschritt ermitteln und darstellen. Zuvor hatten wir dies in JS programmiert, nun können wir dies in R programmieren.\nlibrary(shiny)\nlibrary(lubridate)\n\nui &lt;- tagList(\n     h1(\"Tagesfortschritt\"),\n     p(\"Wie Weit ist der Tag fortgeschritten?\"),\n  )\n\n\nserver &lt;- function(input, output, session){\n+  now &lt;- Sys.time()\n+  \n+  percent &lt;- ((hour(now) + minute(now)/60 + second(now)/3600)/24)*100\n\n}\n\nshinyApp(ui, server)\nViel eleganter, v.a. um später die übersicht zu behalten, ist es, wenn wir die Berechnung in eine Funktion auslagern.\nlibrary(shiny)\nlibrary(lubridate)\n\n+get_percent &lt;- function(){\n+  now &lt;- Sys.time()\n+  diff &lt;- ((hour(now) + minute(now)/60 + second(now)/3600)/24)*100\n+  return(diff)\n+}\n\nui &lt;- tagList(\n  h1(\"Tagesfortschritt\"),\n  p(\"Wie Weit ist der Tag fortgeschritten?\"),\n)\n\n\nserver &lt;- function(input, output, session){\n-      now &lt;- Sys.time()\n-  \n-      percent &lt;- ((hour(now) + minute(now)/60 + second(now)/3600)/24)*100\n\n+      get_percent()\n}\n\n\nshinyApp(ui, server)\nWie krieg ich nun den Prozentwert in das HTML?\nJetzt kommt “reactivity” in’s Spiel.\n\nReactivity is ungewohnt und sehr gewöhnungsbedüftig\nReactivity ist ein zentrales Element von Shiny und kann nicht umgangen werden\nWer Reactivity nicht lernen kann, ohne das “Warum” zu verstehen sollte unbedingt mastering-shiny.org/reactive-motivation lesen\n\nlibrary(shiny)\nlibrary(lubridate)\n\nget_percent &lt;- function(x){\n  now &lt;- Sys.time()\n  diff &lt;- ((hour(now) + minute(now)/60 + second(now)/3600)/24)*100\n  return(diff)\n}\n\nui &lt;- tagList(\n  h1(\"Tagesfortschritt\"),\n  p(\"Wie Weit ist der Tag fortgeschritten?\"),\n+ textOutput(\"progress\")\n)\n\n\nserver &lt;- function(input, output, session){\n+  output$progress &lt;- renderText(get_percent())\n}\n\n\nshinyApp(ui, server)\nUm die App zu aktualisieren, müssen wir die Funktion invalidateLater() verwenden.\nlibrary(shiny)\nlibrary(lubridate)\n\nget_percent &lt;- function(x){\n  now &lt;- Sys.time()\n  diff &lt;- ((hour(now) + minute(now)/60 + second(now)/3600)/24)*100\n  return(diff)\n}\n\nui &lt;- tagList(\n  h1(\"Tagesfortschritt\"),\n  p(\"Wie Weit ist der Tag fortgeschritten?\"),\n  textOutput(\"progress\")\n)\n\n\nserver &lt;- function(input, output, session){\n  output$progress &lt;- renderText({\n+   invalidateLater(100)\n+   get_percent()\n    })\n}\n\n\nshinyApp(ui, server)\nWenn wir zu 100% user HTML basiertes App rekonstruieren wollen, müssen wir noch folgenden Schitt machen:\n\nlibrary(shiny)\nlibrary(lubridate)\n\nget_percent &lt;- function(x){\n  now &lt;- Sys.time()\n  diff &lt;- ((hour(now) + minute(now)/60 + second(now)/3600)/24)*100\n  return(diff)\n}\n\nui &lt;- tagList(\n  h1(\"Tagesfortschritt\"),\n  p(\"Wie Weit ist der Tag fortgeschritten?\"),\n  textOutput(\"progress\"),\n+ uiOutput(\"progress_bar\")\n)\n\n\nserver &lt;- function(input, output, session){\n  output$progress &lt;- renderText({\n   invalidateLater(100)\n   get_percent()\n    })\n\n+ output$progress_bar &lt;- renderUI({ \n+     \n+     invalidateLater(100)\n+     percent &lt;- get_percent()\n+     tags$progress(id = \"progress\", value = percent, max = 100)\n+     \n+   })\n}\n\n\nshinyApp(ui, server)"
  }
]